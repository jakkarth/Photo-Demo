<?php

/**
 * ShootProof API
 * This is documentation for a simple photo upload and management web application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: john@johnplaxco.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class PhotoApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    //TODO move this to a service, use the db to generate it, whatever. Don't copy-paste it everywhere.
    private static function uuid() {
      $data = openssl_random_pseudo_bytes(16);
      $data[6] = chr(ord($data[6]) & 0x0f | 0x40);
      $data[8] = chr(ord($data[8]) & 0x3f | 0x80);

       return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
    }

    /**
     * Operation addPhoto
     *
     * Add a new photo entry to a gallery.
     *
     *
     * @return Http response
     */
    public function addPhoto()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['gallery_uuid'])) {
            throw new \InvalidArgumentException('Missing the required parameter $gallery when calling addPhoto');
        }
        $uuid = PhotoApi::uuid();

        app('db')->insert('insert into photos (gallery_uuid, uuid, width, height, uploaded_at, taken_at, image_url) values (?, ?, null, null, now(), ?, null)',[$input['gallery_uuid'], $uuid, empty($input['taken_at'])?null:$input['taken_at']]);

        return response(json_encode(['uuid'=>$uuid]));
    }
    /**
     * Operation photoFindByAlbumUUIDGet
     *
     * Find photos by album.
     *
     *
     * @return Http response
     */
    public function photoFindByAlbumUUIDGet()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['album_uuid'])) {
            throw new \InvalidArgumentException('Missing the required parameter $album_uuid when calling photoFindByAlbumUUIDGet');
        }
        $album_uuid = $input['album_uuid'];

        $result = app('db')->select('select * from photos where id in (select photo_id from albums_photos_cf where album_id in (select id from albums where uuid=?))', [$album_uuid]);
        return response(json_encode($result));

    }
    /**
     * Operation findPhotosByGallery
     *
     * Finds photos by gallery.
     *
     *
     * @return Http response
     */
    public function findPhotosByGallery()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['gallery_uuid'])) {
            throw new \InvalidArgumentException('Missing the required parameter $gallery_uuid when calling findPhotosByGallery');
        }
        $gallery_uuid = $input['gallery_uuid'];

        $result = app('db')->select('select * from photos where gallery_id in (select id from galleries where uuid=?)', [$gallery_uuid]);
        return response(json_encode($result));
    }
    /**
     * Operation deletePhoto
     *
     * Deletes a photo entry and its associated image..
     *
     * @param string $photo_uuid Photo uuid to delete (required)
     *
     * @return Http response
     */
    public function deletePhoto($photo_uuid)
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        app('db')->table('photos')->where('uuid', '=', $album_uuid)->delete();
        
        return response('operation successful');
    }
    /**
     * Operation getPhotoByUUID
     *
     * Find photo by ID.
     *
     * @param string $photo_uuid UUID of photo to return (required)
     *
     * @return Http response
     */
    public function getPhotoByUUID($photo_uuid)
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $result = app('db')->select('select * from photos where uuid=?', [$photo_uuid]);

        return response(json_encode($result));
    }
    /**
     * Operation updatePhoto
     *
     * Update an existing photo.
     *
     * @param string $photo_uuid The UUID of the photo entry to update (required)
     *
     * @return Http response
     */
    public function updatePhoto($photo_uuid)
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!empty($input['taken_at'])) {
          app('db')->update('update photos set taken_at=? where uuid=?', [$input['taken_at'], $photo_uuid]);
        }

        return response('operation successful');
    }
    /**
     * Operation uploadFile
     *
     * Uploads an image.
     *
     * @param string $photo_uuid ID of photo entry to update (required)
     *
     * @return Http response
     */
    public function uploadFile($photo_uuid)
    {
        $input = Request::all();
        //path params validation
        //not path params validation

        if (!Request::hasFile('file') || !Request::file('file')->isValid()) {
          return response(json_encode(['code'=>123, 'type'=>'creation error', 'message'=>'unable to create image']), 400);
        }

        $file = Request::file('file');
        $file_specs = getimagesize($file->getRealPath());
        ob_start();
        var_dump($file_specs);
        file_put_contents('/tmp/photo.log', ob_get_contents());
        ob_end_clean();

        //TODO: move the file somewhere reasonable, upload it to a CDN, etc.
        app('db')->update('update photos set image_url=?,width=?,height=? where uuid=?', ['http://google.com/', $file_specs[0], $file_specs[1], $photo_uuid]);

        return response('operation successful');
    }

}
